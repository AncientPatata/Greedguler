from algorithm import *
from data_loader import *

# job_durations = [4, 2, 5, 3, 7, 9, 1]
# schedule = allocate_jobs_to_machines(job_durations, 4)


def read_json(filepath):
    with open(filepath, "r") as file_handle:
        data = json.load(file_handle)
    return data


def verifcation_overlap_machine(schedule):
    # Create a dictionary to track the job timeline for each machine
    machine_schedule = {}

    # Iterate through the job schedule list and populate the machine job timeline dictionary
    for machine_jobs in schedule:
        for job in machine_jobs:
            # Extract the machine name
            machine = f"Machine {job['job_index'] + 1}"
            start_time = job['start_time']
            end_time = job['end_time']

            if machine not in machine_schedule:
                machine_schedule[machine] = []

            machine_schedule[machine].append((start_time, end_time))

    # Check if there is any overlap in job start and end times for each machine
    for machine, job_schedule in machine_schedule.items():
        job_schedule.sort()
        for i in range(len(job_schedule) - 1):
            if job_schedule[i][1] > job_schedule[i + 1][0]:
                print(f"There is an overlap in jobs on {machine}")
                break
        else:
            print(f"There is no overlap in jobs on {machine}")


def verification_dependencies(schedule_data, schedule):
    for machine_schedule in schedule:
        for job_details in machine_schedule:
            job_index = job_details['job_index']
            dependencies = schedule_data["nodes"][str(
                job_index)].get("Dependencies", [])
            # print(job_index, "is after:", dependencies)
            for dependency in dependencies:
                for previous_machine_schedule in schedule:
                    for previous_job_details in previous_machine_schedule:
                        if previous_job_details['job_index'] == dependency:
                            dependency_end_time = previous_job_details['end_time']
                            job_start_time = job_details['start_time']
                            if dependency_end_time > job_start_time:
                                print(
                                    f"Error: Dependency of job {job_index} not satisfied.")
                                return
    print("All dependencies are satisfied.")


filepath = 'data/smallRandom.json'
schedule_data = read_json(filepath)
graph = load_dag_from_json(filepath)
schedule = allocate_jobs_to_machines_mod(graph, num_machines=8)

verifcation_overlap_machine(schedule)
verification_dependencies(schedule_data, schedule)
